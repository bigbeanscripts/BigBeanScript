-- Goliath
-- Load Fluent UI libraries
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

-- Configuration
local CONFIG = {
    SLOT_WAIT_TIME = 910,  -- Wait time per slot
    DROPDOWN_REFRESH_INTERVAL = 5,  -- Dropdown refresh interval
    PET_REFRESH_INTERVAL = 30,  -- Interval to refresh huge/unlocked pets
}

-- Create window
local Window = Fluent:CreateWindow({
    Title = "Bean Hub",
    SubTitle = "By Big Bean",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl,
    OnDestroy = function()
        if MinimizeGui then
            local fadeOut = TweenService:Create(MinimizeGui, TweenInfo.new(0.5), {
                Transparency = 1
            })
            fadeOut:Play()
            fadeOut.Completed:Connect(function()
                MinimizeGui:Destroy()
            end)
        end
    end
})

-- Tabs
local Tabs = {
    Machines = Window:AddTab({ Title = "Machines", Icon = "star" })
}

-- Services and Remote Function
local PetServiceRF = ReplicatedStorage.Packages.Knit.Services.PetService.RF:FindFirstChild("getOwned")
local PetGoliathService = ReplicatedStorage.Packages.Knit.Services.PetGoliathService.RE

-- Pet Data Management
local ownedPetData = {} -- Maps pet names to their IDs
local petNames = {}
local selectedPetName = nil  -- Track selected pet globally
local isAutoGoliathRunning = false  -- Flag to control the automation loop

-- Fetch Pet Data
local function fetchPetData()
    -- Reset existing data
    ownedPetData = {}
    petNames = {}

    if not PetServiceRF or not PetServiceRF:IsA("RemoteFunction") then
        warn("RemoteFunction 'getOwned' is invalid or unavailable.")
        return false
    end

    local success, petData = pcall(function()
        return PetServiceRF:InvokeServer()
    end)

    if not success or not petData then
        warn("Failed to fetch pets or no pets found.")
        return false
    end

    for petId, petInfo in pairs(petData) do
        -- Process only Huge and unlocked pets
        if petInfo.CraftType == "Huge" and petInfo.Locked == false then
            local displayName = petInfo.DisplayName
            if not ownedPetData[displayName] then
                ownedPetData[displayName] = {}
            end
            table.insert(ownedPetData[displayName], petId)

            if not table.find(petNames, displayName) then
                table.insert(petNames, displayName)
            end
        end
    end

    return true
end

-- Pet Dropdown
local PetDropdown = Tabs.Machines:AddDropdown("SelectPet", {
    Title = "Select Your Pet",
    Description = "Choose the name of the pets you want to goliath (The pet will only appear if its a huge and is unlocked).",
    Values = petNames,
    Multi = false,
})

-- Refresh Dropdown Periodically
local function startDropdownRefresh()
    spawn(function()
        while true do
            fetchPetData()
            PetDropdown:SetValues(petNames)
            wait(CONFIG.DROPDOWN_REFRESH_INTERVAL)
        end
    end)
end

-- Periodically Update Huge/Unlocked Pet IDs
local function periodicPetDataRefresh()
    spawn(function()
        while true do
            fetchPetData()
            wait(CONFIG.PET_REFRESH_INTERVAL)
        end
    end)
end

-- Dropdown Selection Handler
PetDropdown:OnChanged(function(selectedPet)
    selectedPetName = selectedPet  -- Store selected pet globally
    print("Selected Pet:", selectedPet)
    local ids = ownedPetData[selectedPet] or {}
    
    if #ids > 0 then
        print("IDs Found:")
        for _, id in ipairs(ids) do
            print(" -", id)
        end
    else
        print("No IDs found or the pet is invalid.")
    end
end)

-- Add paragraph for user instructions
Tabs.Machines:AddParagraph({
    Title = "Pet Info",
    Content = [[When selecting a pet, check the console to verify if the pet IDs are displayed correctly.  
If the IDs aren't showing, select a different pet and then switch back to refresh the IDs.

Note: This Goliath automation only works for unlocked pets.  
If you want specific huge pets to stay huge, make sure to lock them.]]
})

-- Auto Goliath Toggle
local AutoGoliathToggle = Tabs.Machines:AddToggle("Auto Goliath", {
    Title = "Enable Auto Goliath",
    Description = "Star Auto Goliathing your pets.",
    State = false
})

-- Auto Goliath Function
local function AutoGoliath(selectedIDs)
    if not selectedIDs or #selectedIDs == 0 then
        warn("No pets selected for Goliath.")
        return
    end

    local currentIndex = 1

    while isAutoGoliathRunning do
        local slotsToFill = math.min(3, #selectedIDs)

        for i = 1, slotsToFill do
            local petId = selectedIDs[((currentIndex + i - 2) % #selectedIDs) + 1]
            
            local purchaseArgs = {
                [1] = petId,
                [2] = "Slot" .. i
            }

            print("Purchasing pet ID:", petId, "into", purchaseArgs[2])
            PetGoliathService.onPurchase:FireServer(unpack(purchaseArgs))
        end

        task.wait(CONFIG.SLOT_WAIT_TIME)

        for i = 1, slotsToFill do
            local claimArgs = {
                [1] = "PlaceholderString",
                [2] = "Slot" .. i,
            }

            print("Claiming Slot:", i)
            PetGoliathService.onClaim:FireServer(unpack(claimArgs))
        end

        currentIndex = ((currentIndex + slotsToFill - 1) % #selectedIDs) + 1
    end
end

-- Auto Goliath Toggle Handler
AutoGoliathToggle:OnChanged(function(enabled)
    if enabled then
        print("Auto Goliath enabled.")
        
        if not selectedPetName then
            warn("Please select a pet to use for Goliath.")
            AutoGoliathToggle:Set(false)
            return
        end

        local selectedIDs = ownedPetData[selectedPetName]
        if not selectedIDs or #selectedIDs == 0 then
            warn("No pet IDs found.")
            AutoGoliathToggle:Set(false)
            return
        end

        isAutoGoliathRunning = true
        spawn(function()
            AutoGoliath(selectedIDs)
        end)
    else
        print("Auto Goliath disabled.")
        isAutoGoliathRunning = false
    end
end)

-- Initialize
fetchPetData()
startDropdownRefresh()
periodicPetDataRefresh()
